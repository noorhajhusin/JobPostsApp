import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { API_BASE_URL } from "../../configs";
import history from "../../history";

const initialState = {
  user: null,
  jobsList: [],
  refreshToken: "",
  isLoading: false,
  loginFailed: false,
  registerError: false,
};

const setSession = (access_token, refreshToken) => {
  if (access_token) {
    localStorage.setItem("jwt_access_token", access_token);
    localStorage.setItem("refreshToken", refreshToken);
    axios.defaults.headers.common["Authorization"] = "Bearer " + access_token;
  } else {
    localStorage.removeItem("jwt_access_token");
    localStorage.removeItem("refreshToken");
    delete axios.defaults.headers.common["Authorization"];
  }
};

export const loadJobsList = createAsyncThunk(
  "employer/loadJobsList",
  async () => {
    //TODO: call login endpoint
    const req = axios.get(`${API_BASE_URL}/JobPosts`);
    return req.then((response) => {
      if (response.data && response.status === 200) {
        return response.data.data;
      }
    });
  }
);

export const createJobPost = createAsyncThunk(
  "employer/createJobPost",
  async (jobPost, { dispatch }) => {
    //TODO: call login endpoint
    const req = axios.post(`${API_BASE_URL}/JobPosts`,jobPost);
    return req.then((response) => {
      if (response.data && response.status === 200) {
        history.push('/home/jobs')
        return response.data;
      }
    });
  }
);

export const employerDashboardSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state, action) => {
      state.user = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadJobsList.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(loadJobsList.fulfilled, (state, action) => {
        state.isLoading = false;
        console.log("action.payload", action);
        if (action.payload) {
          state.jobsList = action.payload;
        } 
      })
      .addCase(loadJobsList.rejected, (state, action) => {
        state.isLoading = false;
        state.loginFailed = true;
      });
  },
});

export const { logout } = employerDashboardSlice.actions;

export default employerDashboardSlice.reducer;
