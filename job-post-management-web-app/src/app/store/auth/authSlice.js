import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { API_BASE_URL } from "../../configs";

const initialState = {
  user: null,
  token: "",
  refreshToken: "",
  isLoading: false,
  loginFailed: false,
  registerError: false,
};

const setSession = (access_token, refreshToken) => {
  if (access_token) {
    localStorage.setItem("jwt_access_token", access_token);
    localStorage.setItem("refreshToken", refreshToken);
    axios.defaults.headers.common["Authorization"] = "Bearer " + access_token;
  } else {
    localStorage.removeItem("jwt_access_token");
    localStorage.removeItem("refreshToken");
    delete axios.defaults.headers.common["Authorization"];
  }
};

export const login = createAsyncThunk(
  "auth/login",
  async ({ email, password }) => {
    console.log(email);
    //TODO: call login endpoint
    const req = axios.post(`${API_BASE_URL}/Identity/Login`, {
      email,
      password,
    });
    return req.then((response) => {
      if (response.data && response.data.user && response.status === 200) {
        setSession(response.data.token, response.data.refreshToken);
        return response.data;
      }
    });
  }
);

export const register = createAsyncThunk(
  "auth/register",
  async ({
    firstName,
    lastName,
    email,
    password,
    confirmPassword,
    type = "Employer",
  }) => {
    //TODO: call login endpoint
    const req = axios.post(`${API_BASE_URL}/Identity/Register${type}`, {
      firstName,
      lastName,
      email,
      password,
      confirmPassword,
    });
    return req.then((response) => {
      if (response.data && response.data.user && response.status === 200) {
        setSession(response.data.token, response.data.refreshToken);
        return response.data;
      }
    });
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state, action) => {
      state.user = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.isLoading = true;
        state.loginFailed = false;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.isLoading = false;
        console.log("action.payload", action);
        if (action.payload && action.payload.user) {
          state.loginFailed = false;
          state.user = action.payload.user;
          state.token = action.payload.token;
          state.refreshToken = action.payload.refreshToken;
        } else {
          state.loginFailed = true;
          //show error notification
        }
      })
      .addCase(login.rejected, (state, action) => {
        state.isLoading = false;
        state.loginFailed = true;
      })
      .addCase(register.pending, (state) => {
        state.isLoading = true;
        state.registerError = false;
      })
      .addCase(register.fulfilled, (state, action) => {
        state.isLoading = false;
        console.log("action.payload", action);
        if (action.payload && action.payload.user) {
          state.registerError = false;
          state.user = action.payload.user;
          state.token = action.payload.token;
          state.refreshToken = action.payload.refreshToken;
        } else {
          state.registerError = true;
          //show error notification
        }
      })
      .addCase(register.rejected, (state, action) => {
        state.registerError = true;
        state.isLoading = false;
      });
  },
});

export const { logout } = authSlice.actions;

export default authSlice.reducer;
