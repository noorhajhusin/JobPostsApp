import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  token: "",
  refreshToken: "",
  isLoading: false,
  loginFailed: false,
};

export const login = createAsyncThunk(
  "auth/login",
  async ({ email, password }) => {
    console.log(email);
    //TODO: call login endpoint
    const response = {success:true,user:{ email, password},token:"asdasd" ,refreshToken:"asdasd" };
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state, action) => {
      state.user = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.isLoading = true;
        state.loginFailed = false;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.isLoading = false;
        if (action.payload && action.payload.success) {
          state.loginFailed = false;
          state.user = action.payload.user;
          state.token = action.token;
          state.refreshToken = action.refreshToken;
        } else {
          state.loginFailed = true;
          //show error notification
        }
      });
  },
});

export const { logout } = authSlice.actions;


export default authSlice.reducer;
